name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

jobs:
  sast:
    name: Static Code Analysis (SAST)
    runs-on: ubuntu-latest
    needs: [pre-commit]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Run Bandit
        run: |
          pip install bandit
          #bandit -r src/ --skip B104
          bandit -r src/

      - name: Run Semgrep
        uses: returntocorp/semgrep-action@v1
        with:
          config: "p/default"

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: 'python'  # Adjust for your project (javascript, java, etc.)

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

  dast:
    name: Dynamic Application Security Testing (DAST)
    runs-on: ubuntu-latest
    needs: [pre-commit]
    steps:
      -   name: Checkout code
          uses: actions/checkout@v3

      - name: Build Docker Image
        run: |
          docker build -t my-flask-app .

      - name: Scan Docker image for vulnerabilities
        uses: anchore/scan-action@v2
        with:
          image: my-flask-app

      - name: Start Web Application
        run: |
          docker run -d -p 8080:8080 -e FLASK_RUN_HOST="0.0.0.0" -e FLASK_RUN_PORT="8080" my-flask-app

          echo "Waiting for the Flask app to start..."
          sleep 10  # Adjust the sleep time as needed

          docker logs $(docker ps -q --filter "ancestor=my-flask-app" --latest)

          # Use a wait loop to check if the app is up:
          until curl --silent --fail http://localhost:8080; do
             echo "Waiting for application to start..."
             sleep 5
          done


      - name: Run OWASP ZAP
        uses: zaproxy/action-full-scan@v0.12.0
        with:
          target: "http://localhost:8080"
          #artifact_name: 'zap-scan'
