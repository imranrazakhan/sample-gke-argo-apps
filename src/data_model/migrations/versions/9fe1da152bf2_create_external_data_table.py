"""Create external_data table

Revision ID: 9fe1da152bf2
Revises:
Create Date: 2025-02-20 21:20:20.937658

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = "9fe1da152bf2"
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "electricity_price_type",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("price_type", sa.String(), nullable=False),
        sa.Column("source", sa.String(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "h2_pricing_meta",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("computed_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("comment", sa.String(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "inflation_meta",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("source", sa.String(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("min_datetime", sa.DateTime(timezone=True), nullable=False),
        sa.Column("max_datetime", sa.DateTime(timezone=True), nullable=False),
        sa.Column("computed_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("description", sa.String(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "netztransparenz",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("year", sa.Integer(), nullable=False),
        sa.Column("month", sa.Integer(), nullable=False),
        sa.Column("base_load_price", sa.Float(), nullable=False),
        sa.Column("capture_price_wind_onshore", sa.Float(), nullable=False),
        sa.Column("capture_price_wind_onshore_remote", sa.Float(), nullable=True),
        sa.Column("capture_price_wind_offshore", sa.Float(), nullable=False),
        sa.Column("capture_price_wind_offshore_remote", sa.Float(), nullable=True),
        sa.Column("capture_price_solar", sa.Float(), nullable=False),
        sa.Column("capture_price_solar_remote", sa.Float(), nullable=True),
        sa.Column("mw_remote_euro_per_mwh", sa.Float(), nullable=True),
        sa.Column("pm_remote_euro_per_mwh", sa.Float(), nullable=True),
        sa.Column("negative_hours_6h", sa.String(), nullable=True),
        sa.Column("negative_hours_4h", sa.String(), nullable=True),
        sa.Column("negative_hours_3h", sa.String(), nullable=True),
        sa.Column("negative_hours_1h", sa.String(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("year", "month"),
    )
    op.create_table(
        "redispatch_meta",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("source", sa.String(), nullable=False),
        sa.Column("region", sa.String(), nullable=False),
        sa.Column("site", sa.String(), nullable=False),
        sa.Column("upload_date", sa.DateTime(timezone=True), nullable=True),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("region", "site", name="redispatch_meta_region_site_key"),
    )
    op.create_table(
        "weather_meta",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column(
            "origin",
            sa.Enum("METEOMATICS", "ERA5", name="weatherorigin"),
            nullable=False,
        ),
        sa.Column("latitude", sa.Float(), nullable=False),
        sa.Column("longitude", sa.Float(), nullable=False),
        sa.Column("comment", sa.String(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("origin", "latitude", "longitude"),
    )
    op.create_table(
        "electricity_price_period",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("price_type_id", sa.Integer(), nullable=False),
        sa.Column("min_datetime", sa.DateTime(timezone=True), nullable=False),
        sa.Column("max_datetime", sa.DateTime(timezone=True), nullable=False),
        sa.Column("upload_timestamp", sa.DateTime(timezone=True), nullable=False),
        sa.Column("inflation", sa.Boolean(), nullable=False),
        sa.ForeignKeyConstraint(
            ["price_type_id"],
            ["electricity_price_type.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "h2_pricing",
        sa.Column("timestamp", sa.DateTime(timezone=True), nullable=False),
        sa.Column("meta_id", sa.Integer(), nullable=False),
        sa.Column("h2_price", sa.Float(), nullable=False),
        sa.ForeignKeyConstraint(
            ["meta_id"],
            ["h2_pricing_meta.id"],
        ),
        sa.PrimaryKeyConstraint("timestamp", "meta_id"),
    )
    op.create_table(
        "inflation_data",
        sa.Column("timestamp", sa.DateTime(timezone=True), nullable=False),
        sa.Column("value", sa.Float(), nullable=False),
        sa.Column("meta_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["meta_id"],
            ["inflation_meta.id"],
        ),
        sa.PrimaryKeyConstraint("timestamp", "meta_id"),
    )
    op.create_table(
        "redispatch_data",
        sa.Column("timestamp", sa.DateTime(timezone=True), nullable=False),
        sa.Column("increase", sa.Float(), nullable=False),
        sa.Column("curtailment", sa.Float(), nullable=False),
        sa.Column("region_key", sa.Integer(), nullable=True),
        sa.Column("description", sa.String(), nullable=False),
        sa.Column("meta_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["meta_id"],
            ["redispatch_meta.id"],
        ),
        sa.PrimaryKeyConstraint("timestamp", "description", "meta_id"),
    )
    op.create_table(
        "weather_data",
        sa.Column("timestamp", sa.DateTime(timezone=True), nullable=False),
        sa.Column("temperature_2m", sa.Float(), nullable=True),
        sa.Column("relative_humidity_2m", sa.Float(), nullable=True),
        sa.Column("dew_point_2m", sa.Float(), nullable=True),
        sa.Column("msl_pressure", sa.Float(), nullable=True),
        sa.Column("sfc_pressure", sa.Float(), nullable=True),
        sa.Column("low_cloud_cover", sa.Float(), nullable=True),
        sa.Column("effective_cloud_cover", sa.Float(), nullable=True),
        sa.Column("total_cloud_cover", sa.Float(), nullable=True),
        sa.Column("ceiling_height", sa.Float(), nullable=True),
        sa.Column("precipitation", sa.Float(), nullable=True),
        sa.Column("wind_dir_10m", sa.Float(), nullable=True),
        sa.Column("wind_speed_u_10m", sa.Float(), nullable=True),
        sa.Column("wind_speed_v_10m", sa.Float(), nullable=True),
        sa.Column("wind_dir_100m", sa.Float(), nullable=True),
        sa.Column("wind_speed_u_100m", sa.Float(), nullable=True),
        sa.Column("wind_speed_v_100m", sa.Float(), nullable=True),
        sa.Column("snow_depth", sa.Float(), nullable=True),
        sa.Column("clear_sky_rad", sa.Float(), nullable=True),
        sa.Column("diffuse_rad", sa.Float(), nullable=True),
        sa.Column("direct_rad", sa.Float(), nullable=True),
        sa.Column("global_rad", sa.Float(), nullable=True),
        sa.Column("meta_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["meta_id"],
            ["weather_meta.id"],
        ),
        sa.PrimaryKeyConstraint("timestamp", "meta_id"),
    )
    op.create_table(
        "electricity_price",
        sa.Column("timestamp", sa.DateTime(timezone=True), nullable=False),
        sa.Column("price", sa.Float(), nullable=False),
        sa.Column("price_type_id", sa.Integer(), nullable=False),
        sa.Column("price_period_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["price_period_id"],
            ["electricity_price_period.id"],
        ),
        sa.ForeignKeyConstraint(
            ["price_type_id"],
            ["electricity_price_type.id"],
        ),
        sa.PrimaryKeyConstraint("timestamp", "price_type_id", "price_period_id"),
    )
    op.create_table(
        "intraday_continuous_price",
        sa.Column("price_type_id", sa.Integer(), nullable=False),
        sa.Column("price_period_id", sa.Integer(), nullable=False),
        sa.Column("trade_id", sa.Float(), nullable=False),
        sa.Column("remote_trade_id", sa.Float(), nullable=False),
        sa.Column("side", sa.Boolean(), nullable=False),
        sa.Column("product", sa.String(), nullable=False),
        sa.Column("delivery_start", sa.DateTime(timezone=True), nullable=False),
        sa.Column("delivery_end", sa.DateTime(timezone=True), nullable=False),
        sa.Column("execution_time", sa.DateTime(timezone=True), nullable=False),
        sa.Column("delivery_area", sa.String(), nullable=False),
        sa.Column("trade_phase", sa.String(), nullable=False),
        sa.Column("user_defined_block", sa.String(), nullable=False),
        sa.Column("self_trade", sa.String(), nullable=False),
        sa.Column("price", sa.Float(), nullable=False),
        sa.Column("volume", sa.Float(), nullable=False),
        sa.Column("order_id", sa.Float(), nullable=False),
        sa.ForeignKeyConstraint(
            ["price_period_id"],
            ["electricity_price_period.id"],
        ),
        sa.ForeignKeyConstraint(
            ["price_type_id"],
            ["electricity_price_type.id"],
        ),
        sa.PrimaryKeyConstraint("price_type_id", "price_period_id"),
        sa.UniqueConstraint(
            "delivery_start", "delivery_end", "execution_time", "delivery_area"
        ),
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("intraday_continuous_price")
    op.drop_table("electricity_price")
    op.drop_table("weather_data")
    op.drop_table("redispatch_data")
    op.drop_table("inflation_data")
    op.drop_table("h2_pricing")
    op.drop_table("electricity_price_period")
    op.drop_table("weather_meta")
    op.drop_table("redispatch_meta")
    op.drop_table("netztransparenz")
    op.drop_table("inflation_meta")
    op.drop_table("h2_pricing_meta")
    op.drop_table("electricity_price_type")
    # ### end Alembic commands ###
